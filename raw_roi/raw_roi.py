#coding=utf-8

import os
import sys
import ctypes
import struct
import math
##import sub_func
#from sub_func import *

def raw_roi() :
	##	===============================================================================================
	##	ref ***commond line parameter***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	debug			调试开关，默认关闭
	##	src_path		输入文件的路径
	##	pix_format		像素格式，默认8bit
	##	resolution_list	输入图像的分辨率
	##	roi_list		roi参数
	##	width			输入图像的宽度
	##	height			输入图像的高度
	##	offset_x		roi的x方向偏移地址
	##	offset_y		roi的y方向偏移地址
	##	roi_width		roi宽度
	##	roi_height		roi高度
	##	-------------------------------------------------------------------------------------
	debug 			= 0;
	src_path		= 0;
	pix_format		= 8;
	resolution_list	= [];
	roi_list		= [];

	width			= 0;
	height			= 0;
	offset_x		= 0;
	offset_y		= 0;
	roi_width		= 0;
	roi_height		= 0;

	##	-------------------------------------------------------------------------------------
	##	循环查找参数
	##	-------------------------------------------------------------------------------------
	for i in range(0,len(sys.argv)):
		if(sys.argv[i]=="-d"):
			debug		= 1;
		if(sys.argv[i]=="-f"):
			src_path	= sys.argv[i+1];
		if(sys.argv[i]=="-p"):
			pix_format	= int(sys.argv[i+1]);
		if(sys.argv[i]=="-i"):
			for j in range(1,len(sys.argv)-i):
				if(sys.argv[i+j][0]=="-"):
					break;
				else:
					resolution_list.append(int(sys.argv[i+j]));
		if(sys.argv[i]=="-r"):
			for j in range(1,len(sys.argv)-i):
				if(sys.argv[i+j][0]=="-"):
					break;
				else:
					roi_list.append(int(sys.argv[i+j]));

	##	-------------------------------------------------------------------------------------
	##	从命令行中获得像素格式
	##	-------------------------------------------------------------------------------------
	if(pix_format<=8):
		pix_format	= 8;
	elif(pix_format>8 & pix_format<=16):
		pix_format	= 16;
	else:
		pix_format	= 32;

	##	-------------------------------------------------------------------------------------
	##	从列表中提取宽高和roi信息
	##	-------------------------------------------------------------------------------------
	width		= resolution_list[0];
	height		= resolution_list[1];
	offset_x	= roi_list[0];
	offset_y	= roi_list[1];
	roi_width	= roi_list[2];
	roi_height	= roi_list[3];

	##	===============================================================================================
	##	ref ***file operation***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	判断输入的是否是一个文件
	##	--如果不是文件，打印错误，退出
	##	--如果是一个文件，打开文件
	##	-------------------------------------------------------------------------------------
	if(os.path.isfile(src_path)==False):	return -1
	if(debug==1):	print("src_path is really exist");
	infile	= open(src_path,"rb")

	##	===============================================================================================
	##	ref ***图像深度***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	每个像素占用多少个byte
	##	-------------------------------------------------------------------------------------
	pix_byte	= pix_format/8;

	##	===============================================================================================
	##	ref ***读文件***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	循环读图像
	##	-------------------------------------------------------------------------------------
	##	-------------------------------------------------------------------------------------
	##	roi的起始点，偏移开始的地方
	##	-------------------------------------------------------------------------------------
	roi_start	= offset_y*width+offset_x;
	##	-------------------------------------------------------------------------------------
	##	外层循环-高度
	##	-------------------------------------------------------------------------------------
	pixel_list	= [];
	for i in range(0, roi_height):
		##	-------------------------------------------------------------------------------------
		##	偏移到每一行的起始点
		##	-------------------------------------------------------------------------------------
		infile.seek(int(pix_byte*(roi_start+i*width)),0);
		##	-------------------------------------------------------------------------------------
		##	内层循环-宽度
		##	-------------------------------------------------------------------------------------
		for j in range(0, roi_width):
			##	-------------------------------------------------------------------------------------
			##	第一步，获取一个像素的数据
			##	1byte unsigned char
			##	2byte unsigned short
			##	4byte unsigned int
			##	-------------------------------------------------------------------------------------
			if(pix_byte==1):
				(pixel,)	 = struct.unpack("B",infile.read(1));
			elif(pix_byte==2):
				(pixel,)	 = struct.unpack("H",infile.read(2));
			elif(pix_byte==4):
				(pixel,)	 = struct.unpack("I",infile.read(4));
			pixel_list.append(pixel);
#		pixel_list.append(infile.read(int(pix_byte*roi_width)));

#	for eachpix in pixel_list:
#		print(eachpix);

	##	===============================================================================================
	##	ref ***输出文件***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	从源文件的路径得到目的文件路径
	##	--解析后的文件名字是"select_line.txt"
	##	-------------------------------------------------------------------------------------
	temp = os.path.split(src_path);
	only_path = temp[0];
	only_name = temp[1];
	if(only_name.rindex(".")!=-1):
		only_name	= only_name[0:only_name.rindex(".")];
#	print("only_path is ",only_path);
#	print("only_name is ",only_name);
	path = only_path+'\\'+only_name+'_'+str(offset_x)+'-'+str(offset_y)+'-'+str(roi_width)+'-'+str(roi_height)+".raw";

	##	-------------------------------------------------------------------------------------
	##	建立新的文件
	##	-------------------------------------------------------------------------------------
	outfile	= open(path,"wb+");

	##	-------------------------------------------------------------------------------------
	##	写入新的文件
	##	-------------------------------------------------------------------------------------
	for eachpix in pixel_list:
		if(pix_byte==1):
			write_data	 = struct.pack("B",eachpix);
		elif(pix_byte==2):
			write_data	 = struct.pack("H",eachpix);
		elif(pix_byte==4):
			write_data	 = struct.pack("I",eachpix);
		outfile.write(write_data);

	##	===============================================================================================
	##	ref ***结束***
	##	===============================================================================================
	outfile.close()



raw_roi()
