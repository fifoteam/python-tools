#coding=utf-8

import os
import sys
import ctypes
import struct
import math
##import sub_func
#from sub_func import *

def raw_thresh() :
	##	===============================================================================================
	##	ref ***commond line parameter***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	debug			调试开关，默认关闭
	##	src_path		输入文件的路径
	##	pix_format		像素格式，默认8bit
	##	pix_thresh		图像阈值
	##	-------------------------------------------------------------------------------------
	debug 			= 0;
	src_path		= 0;
	pix_format		= 8;
	pix_thresh		= 0;

	##	-------------------------------------------------------------------------------------
	##	循环查找参数
	##	-------------------------------------------------------------------------------------
	for i in range(0,len(sys.argv)):
		if(sys.argv[i]=="-d"):
			debug		= 1;
		if(sys.argv[i]=="-f"):
			src_path	= sys.argv[i+1];
		if(sys.argv[i]=="-p"):
			pix_format	= int(sys.argv[i+1]);
		if(sys.argv[i]=="-t"):
			pix_thresh	= int(sys.argv[i+1]);
	##	-------------------------------------------------------------------------------------
	##	从命令行中获得像素格式
	##	-------------------------------------------------------------------------------------
	if(pix_format<=8):
		pix_format	= 8;
	elif(pix_format>8 & pix_format<=16):
		pix_format	= 16;
	else:
		pix_format	= 32;
	##	-------------------------------------------------------------------------------------
	##	每个像素占用多少个byte
	##	-------------------------------------------------------------------------------------
	pix_byte	= pix_format/8;

	##	===============================================================================================
	##	ref ***file operation***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	判断输入的是否是一个文件
	##	--如果不是文件，打印错误，退出
	##	--如果是一个文件，打开文件
	##	-------------------------------------------------------------------------------------
	if(os.path.isfile(src_path)==False):	return -1
	if(debug==1):	print("src_path is really exist");
	infile	= open(src_path,"rb")

	##	===============================================================================================
	##	ref ***read file***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	把图像读到内存之中，方便处理，减少与硬盘交互的时间
	##	-------------------------------------------------------------------------------------
	pixel_list	= [];

	##	-------------------------------------------------------------------------------------
	##	计算图像大小，进而得出像素个数
	##	-------------------------------------------------------------------------------------
	file_size		= os.path.getsize(src_path);
	pixel_num		= int(file_size/pix_byte);

	##	-------------------------------------------------------------------------------------
	##	循环读图像
	##	-------------------------------------------------------------------------------------
	for i in range(0, pixel_num):
		##	-------------------------------------------------------------------------------------
		##	第一步，获取一个像素的数据
		##	1byte unsigned char
		##	2byte unsigned short
		##	4byte unsigned int
		##	-------------------------------------------------------------------------------------
		if(pix_byte==1):
			(pixel,)	 = struct.unpack("B",infile.read(1));
		elif(pix_byte==2):
			(pixel,)	 = struct.unpack("H",infile.read(2));
		elif(pix_byte==4):
			(pixel,)	 = struct.unpack("I",infile.read(4));

		pixel_list.append(pixel);

	##	-------------------------------------------------------------------------------------
	##	output list 是输出图像的列表
	##	-------------------------------------------------------------------------------------
	output_list	= [];

	##	===============================================================================================
	##	ref ***thresholding***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	确定最大值
	##	-------------------------------------------------------------------------------------
	if(pix_format==8):
		pix_max	= 255;
	elif(pix_format==16):
		pix_max	= 65535;
	elif(pix_format==32):
		pix_max	= 4294967295;

	##	-------------------------------------------------------------------------------------
	##	二值化处理
	##	-------------------------------------------------------------------------------------
	for i in range(0, pixel_num):
		if(pixel_list[i]<=pix_thresh):
			output_list.append(0);
		else:
			output_list.append(pix_max);

	##	===============================================================================================
	##	ref ***output file***
	##	===============================================================================================
	##	-------------------------------------------------------------------------------------
	##	从源文件的路径得到目的文件路径
	##	-------------------------------------------------------------------------------------
	temp = os.path.split(src_path);
	only_path = temp[0];
	only_name = temp[1];
	if(only_name.rindex(".")!=-1):
		only_name	= only_name[0:only_name.rindex(".")];
#	print("only_path is ",only_path);
#	print("only_name is ",only_name);

	path = only_path+'\\'+only_name+"_thresh.raw";

	##	-------------------------------------------------------------------------------------
	##	建立新的文件
	##	-------------------------------------------------------------------------------------
	outfile	= open(path,"wb+");

	##	-------------------------------------------------------------------------------------
	##	写入新的文件
	##	-------------------------------------------------------------------------------------
	for eachpix in output_list:
		if(pix_byte==1):
			write_data	 = struct.pack("B",eachpix);
		elif(pix_byte==2):
			write_data	 = struct.pack("H",eachpix);
		elif(pix_byte==4):
			write_data	 = struct.pack("I",eachpix);
		outfile.write(write_data);

	##	===============================================================================================
	##	ref ***结束***
	##	===============================================================================================
	outfile.close()



raw_thresh()
